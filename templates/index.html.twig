{% extends 'base.html.twig' %}

{% block body %}
    <h2>‚òï Machine √† caf√©</h2>

    <p>
        √âtat actuel :
        <strong id="machine-status" style="color: {{ {
            'off': 'gray',
            'starting': 'orange',
            'ready': 'green',
            'running': 'blue',
            'shutdown': 'red'
        }[machine.status]|default('black') }}">
            {{ {
                'off': '‚õî √âteinte',
                'starting': '‚ö° D√©marrage...',
                'ready': '‚úÖ Pr√™te',
                'running': '‚òï En pr√©paration',
                'shutdown': 'üõë Arr√™t en cours...'
            }[machine.status]|default('Inconnu') }}
        </strong>
    </p>

    <button id="start-btn" >‚ñ∂Ô∏è D√©marrer</button>
    <button id="stop-btn">‚èπÔ∏è Arr√™ter</button>

    <div style="display: flex; justify-content: space-between;">
        <!-- Commande en cours -->
        <div id="current-order" style="display: none; width: 45%;">
            <h3>
                ‚è≥ Commande en cours
                <a href="#" id="cancel-current-order" data-id="" style="margin-left: 10px">‚ùå</a>
            </h3>
            <p><strong>Taille :</strong> <span id="current-size"></span></p>
            <p><strong>Intensit√© :</strong> <span id="current-intensity"></span></p>
            <p><strong>Depuis :</strong> <span id="current-start-time"></span></p>
        </div>

        <!-- Commandes en attente -->
        <div id="pending-orders" style="    width: 45%; display: none;">
            <h3>üïí Commandes en attente</h3>
            <ul id="pending-orders-list"></ul>
        </div>
    </div>

    <section id="coffee-order" style="{{ machine.status == 'ready' ? '' : 'display: none' }}">
        <hr>
        <h3>üì¶ Commander un caf√©</h3>

        <form id="coffee-form">
            <label for="size">Taille :</label>
            <select name="size" id="size" required>
                {% for size in coffeeSizes %}
                    <option value="{{ size.value }}">{{ size.value|capitalize }}</option>
                {% endfor %}
            </select>

            <br><br>

            <label for="intensity">Intensit√© : <span id="intensity-value">5</span></label>
            <input type="range" id="intensity" name="intensity" min="1" max="10" value="5">

            <br><br>

            <button type="submit">‚òï Commander</button>
        </form>

        <div id="coffee-message" style="margin-top: 10px; color: green;"></div>
    </section>
    <script>
        const sectionOrder = document.getElementById('coffee-order');
        const statusLabels = {
            off: { label: "‚õî √âteinte", color: "gray" },
            starting: { label: "‚ö° D√©marrage...", color: "orange" },
            ready: { label: "‚úÖ Pr√™te", color: "green" },
            running: { label: "‚òï En pr√©paration", color: "blue" },
            shutdown: { label: "üõë Arr√™t en cours...", color: "red" },
        };
        function updateStyle(status) {
            document.getElementById('start-btn').disabled = ['starting', 'ready', 'running', 'shutdown'].includes(status);
            document.getElementById('stop-btn').disabled = ['off', 'shutdown'].includes(status);

            sectionOrder.style.display = ['ready', 'running'].includes(status) ? '' : 'none';
        }

        updateStyle("{{ machine.status }}");
        async function updateStatus() {
            const res = await fetch('/api/coffee-machine/status');
            const data = await res.json();
            const status = data.status;
            const el = document.getElementById('machine-status');

            el.textContent = statusLabels[status]?.label || 'Inconnu';
            el.style.color = statusLabels[status]?.color || 'black';
            updateStyle(status);
            if (status === 'running') {
                updateProcessingOrder();
            } else {
                document.getElementById('current-order').style.display = 'none';
            }
            getPendingOrders();
        }

        async function updateProcessingOrder() {
            const orderRes = await fetch('/api/coffee/processing');
            if (orderRes.ok) {
                const order = await orderRes.json();
                document.getElementById('current-size').textContent = order.size;
                document.getElementById('current-intensity').textContent = order.intensity;
                document.getElementById('current-start-time').textContent = new Date(order.createdAt.date).toLocaleString();

                document.getElementById('current-order').style.display = 'block';

                const cancelBtn = document.getElementById('cancel-current-order');
                cancelBtn.dataset.id = order.id;
            } else {
                document.getElementById('current-order').style.display = 'none';
            }
        }
        document.getElementById('cancel-current-order').addEventListener('click', async (e) => {
            e.preventDefault();

            const orderId = e.target.dataset.id;
            if (!orderId || !confirm('Annuler cette commande ?')) return;

            try {
                await fetch(`/api/coffee/${orderId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                location.reload();
            } catch (error) {
                console.error(error);
                alert('Erreur lors de l\'annulation.');
            }
        });

        async function getPendingOrders() {
            // R√©cup√©rer et afficher les commandes en attente
            const pendingRes = await fetch('/api/coffee/pending');
            if (pendingRes.ok) {
                const pendingOrders = await pendingRes.json();
                const pendingList = document.getElementById('pending-orders-list');
                pendingList.innerHTML = ''; // Vider la liste avant de la remplir

                if (pendingOrders.length > 0) {
                    pendingOrders.forEach(order => {
                        const li = document.createElement('li');
                        li.textContent = `${order.size} - Intensit√© : ${order.intensity}`;

                        const cancelBtn = document.createElement('a');
                        cancelBtn.href = '#';
                        cancelBtn.textContent = ' ‚ùå';
                        cancelBtn.onclick = async (e) => {
                            e.preventDefault();
                            if (!confirm('Annuler cette commande ?')) return;

                            try {
                                await fetch(`/api/coffee/${order.id}/cancel`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                });
                                location.reload();
                            } catch (error) {
                                console.error(error);
                                alert('Erreur lors de l\'annulation de la commande.');
                            }
                        };

                        li.appendChild(cancelBtn);

                        pendingList.appendChild(li);
                    });
                    document.getElementById('pending-orders').style.display = 'block';
                } else {
                    document.getElementById('pending-orders').style.display = 'none';
                }
            } else {
                document.getElementById('pending-orders').style.display = 'none';
            }
        }
        document.getElementById('start-btn').addEventListener('click', async () => {
            await fetch('/api/coffee-machine/start', { method: 'POST' });
            updateStatus();
        });

        document.getElementById('stop-btn').addEventListener('click', async () => {
            await fetch('/api/coffee-machine/stop', { method: 'POST' });
            updateStatus();
        });

        // Refresh status every 3 seconds
        setInterval(updateStatus, 3000);
        updateStatus();
        // Orders
        // Afficher la valeur actuelle du slider
        document.getElementById('intensity').addEventListener('input', (e) => {
            document.getElementById('intensity-value').textContent = e.target.value;
        });

        // Soumission du formulaire
        document.getElementById('coffee-form').addEventListener('submit', async (e) => {
            e.preventDefault();

            const size = document.getElementById('size').value;
            const intensity = parseInt(document.getElementById('intensity').value);

            try {
                const res = await fetch('/api/coffee/order', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ size, intensity }),
                });

                if (!res.ok) {
                    throw new Error("Erreur lors de la commande");
                }

                document.getElementById('coffee-message').textContent = '‚úÖ Caf√© command√© avec succ√®s !';
                document.getElementById('coffee-message').style.color = 'green';

                // Optionnel : reset le formulaire
                document.getElementById('coffee-form').reset();
                document.getElementById('intensity-value').textContent = 5;

            } catch (err) {
                console.error(err);
                document.getElementById('coffee-message').textContent = '‚ùå Erreur lors de la commande';
                document.getElementById('coffee-message').style.color = 'red';
            }


        });

    </script>
{% endblock %}
